sudo apt-get install subversion 


sudo mkdir -p /application/{svndata,svnpasswd}

subserve：
    -d 表示后台运行 
    -r表示数据存放的目录
    --list port 指定端口
    --pid 指定pid存放路径
#开启服务  svn启东时一定要用root权限启动 或者是给予当前用户 svndata目录下的权限  
subserve -d -r /application/svndata


svnadmin:
svnadmin help | svnadmin help create 
    create 创建
    
#创建版本库    
svnadmin create /application/svndata/scdoc （--fs-type fsfs|bdb）默认为fsfs

sudo apt-get install tree
tree /application/svndata


#文件配置目录 /application/svndata/scdoc/conf

   

##修改文件要先备份  
 sudo cp svnserve.conf  svnserve.conf.ori
 
#匿名访问
anon-access = none
#权限写
auth-access = write

#密码存放
password-db = /application/svnpasswd/passwd


#权限数据库
authz-db = /application/svnpasswd/authz


#快速替换

sed -i 's/# auth-access = write/auth-access=write/' svnserve.conf
sed -i 's/# anon-access = read/aanon-access=none/' svnserve.conf
sed -i 's%# passwd-db = passwd%passwd-db = /application/svnpasswd/passwd%' svnserve.conf
sed -i 's%# authz-db = authz%authz-db = /application/svnpasswd/authz%' svnserve.conf

#查看

egrep "\-access|\-db =" svnserve.conf

sudo cp authz passwd  ../../../svnpasswd/


#svnpasswd/
sudo chmod 700 *


#添加帐号密码

sudo gedit passwd

admin = amdin 
passwd = passwd



#修改权限
sudo gedit authz

设置分组
sagroup = admin,dcjoney

#项目根路径 分配权限
[sadoc:/]
admin = rw
dcjoney = r

#设置组权限 前加@符号
@sagroup = r

#重启svn服务

pkill svnserve

svnserve -d -r /application/svndata

#使用pid file

kill -USR1 `cat /application/svndata/svn.pid`



#客户端访问
svn://ip/scdoc(项目名称)
账号: 密码:

linux下 svn的命令:

svn:
    ci 提交
    co 检出
    
svn co svn://ip/scdoc --username :name --password :password
    
svn update co svn://ip/scdoc /svndata/ --username --password

svn co file:///application/svndata/scdoc //本地访问


#解决字符集
遇到 Cant’t convert string to ‘utf-8’
export LC_CTYPE=en_US.UTF-8
export LC_ALL=
#locle 查看字符集


#查看数据

svn list|ls   svn://ip/scdoc

#查看版本详细内容
svn list|ls   svn://ip/scdoc --verbose

svn co svn://ip/scodc /svndata/(本地目录) --username :name


sudo mkdir -p /svn/{trunk,branch,tag}
trunk 主干
branch 分支
tag 标记


#导入 svn库中

sudo svn import /svn file:///application/svndata/scdoc -m "import"


#将主干 内容拷贝到分支

svn copy svn://ip/scdoc/trunk svn://ip/scdoc/branch/branch_cms_1 -m "创建了一个分支从主干上" --username :name



#svn版本系统钩子

inotify 或者 sersync监听：

模板文件: /application/svndata/scdoc/hooks 默认扩展名为 tmpl 如果需要使用 将tmpl去掉变为可执行文件

#hooks模板

问题：
    svn版本库空环境中执行钩子脚本 没有任何环境变量 甚至没有 %path% $path
    完成之后 手动可以执行 在svn版本库中却不可以执行。
    
    设置好环境变量与 绝对路径

rsync与svn结合 实现数据事实同步


cp hooks/post-commit.tmpl hooks/post-commit

内容:
#!/bin/bash
REPOS="$1"
REV="$2"
export LANG=en_US.UTF-8
LOGPATH="/app/log"
[ ! -d ${LOGPATH} ] && mkdir ${LOGPATH} -p
#update content from svn
SVN=/usr/bin/svn
$SVN update --username :name --password :passwd /data/www
if [$? -eq 0 ]
    then
        /usr/bin/rsync -az --delete /data/www /tmp/
fi

#钩子脚本要执行一般修改为700权限




#svn 常用操作命令
检出
svn  checkout  http://路径(目录或文件的全路径)　[本地目录全路径] --username　用户名
svn  checkout  svn://路径(目录或文件的全路径)　[本地目录全路径]  --username　用户名

例子：
svn co svn://localhost/测试工具 /home/testtools --username wzhnsc
svn co http://localhost/test/testapp --username wzhnsc
svn checkout svn://localhost/测试工具 /home/testtools --username wzhnsc
svn checkouthttp://localhost/test/testapp --username wzhnsc


#导出(导出一个干净的不带.svn文件夹的目录树)
svn  export  [-r 版本号]  http://路径(目录或文件的全路径) [本地目录全路径]　--username　用户名
svn  export  [-r 版本号]  svn://路径(目录或文件的全路径) [本地目录全路径]　--username　用户名
svn  export  本地检出的(即带有.svn文件夹的)目录全路径  要导出的本地目录全路径

例子：
svn export svn://localhost/测试工具 /home/testtools --username wzhnsc
svn export svn://localhost/test/testapp --username wzhnsc
svn export /home/testapp /home/testtools
注：第一种从版本库导出干净工作目录树的形式是指定URL，
如果指定了修订版本号，会导出相应的版本，
如果没有指定修订版本，则会导出最新的，导出到指定位置。
如果省略 本地目录全路径，URL的最后一部分会作为本地目录的名字。
第二种形式是指定 本地检出的目录全路径 到 要导出的本地目录全路径，所有的本地修改将会保留，
但是不在版本控制下(即没提交的新文件，因为.svn文件夹里没有与之相关的信息记录)的文件不会拷贝。



#添加新文件

svn　add　文件名
注：告诉SVN服务器要添加文件了，还要用svn commint -m真实的上传上去！
例子：
svn add test.php ＜－ 添加test.php 
svn commit -m “添加我的测试用test.php“ test.php
svn add *.php ＜－ 添加当前目录下所有的php文件
svn commit -m “添加我的测试用全部php文件“ *.php


#提交

svn　commit　-m　“提交备注信息文本“　[-N]　[--no-unlock]　文件名
svn　ci　-m　“提交备注信息文本“　[-N]　[--no-unlock]　文件名
必须带上-m参数，参数可以为空，但是必须写上-m
例子：
svn commit -m “提交当前目录下的全部在版本控制下的文件“ * ＜－ 注意这个*表示全部文件
svn commit -m “提交我的测试用test.php“ test.php
svn commit -m “提交我的测试用test.php“ -N --no-unlock test.php ＜－ 保持锁就用–no-unlock开关
svn ci -m “提交当前目录下的全部在版本控制下的文件“ * ＜－ 注意这个*表示全部文件
svn ci -m “提交我的测试用test.php“ test.php
svn ci -m “提交我的测试用test.php“ -N --no-unlock test.php ＜－ 保持锁就用–no-unlock开关

#更新文件

svn　update
svn　update　-r　修正版本　文件名
svn　update　文件名
例子：
svn update ＜－ 后面没有目录，默认将当前目录以及子目录下的所有文件都更新到最新版本
svn update -r 200 test.cpp ＜－ 将版本库中的文件 test.cpp 还原到修正版本（revision）200
svn update test.php ＜－ 更新与版本库同步。
　　　　　　　　　　　 提交的时候提示过期冲突，需要先 update 修改文件，
　　　　　　　　　　　 然后清除svn resolved，最后再提交commit。
　　　　　　　　　　　 
　　　　　　　　　　　 
#删除文件

svn　delete　svn://路径(目录或文件的全路径) -m “删除备注信息文本”
推荐如下操作：
svn　delete　文件名 
svn　ci　-m　“删除备注信息文本”
例子：
svn delete svn://localhost/testapp/test.php -m “删除测试文件test.php”
推荐如下操作：
svn delete test.php 
svn ci -m “删除测试文件test.php”

#加锁/解锁

svn　lock　-m　“加锁备注信息文本“　[--force]　文件名 
svn　unlock　文件名
例子：
svn lock -m “锁信测试用test.php文件“ test.php 
svn unlock test.php


#比较差异

svn　diff　文件名 
svn　diff　-r　修正版本号m:修正版本号n　文件名
例子：
svn diff test.php＜－ 将修改的文件与基础版本比较
svn diff -r 200:201 test.php＜－ 对 修正版本号200 和 修正版本号201 比较差异


#查看文件或者目录状态
svn st 目录路径/名
svn status 目录路径/名＜－ 目录下的文件和子目录的状态，正常状态不显示 
　　　　　　　　　　　　　【?：不在svn的控制中；  M：内容被修改；C：发生冲突；
　　　　　　　　　　　　　　A：预定加入到版本库；K：被锁定】 
svn  -v 目录路径/名
svn status -v 目录路径/名＜－ 显示文件和子目录状态
　　　　　　　　　　　　　　【第一列保持相同，第二列显示工作版本号，
　　　　　　　　　　　　　　 第三和第四列显示最后一次修改的版本号和修改人】
注：svn status、svn diff和 svn revert这三条命令在没有网络的情况下也可以执行的，
　　原因是svn在本地的.svn中保留了本地版本的原始拷贝。
　　
　　
　　
#查看日志
svn　log　文件名
例子：
svn log test.php＜－ 显示这个文件的所有修改记录，及其版本号的变化


#查看文件详细信息
svn　info　文件名
例子：
svn info test.php


#SVN 帮助
svn　help ＜－ 全部功能选项
svn　help　ci ＜－ 具体功能的说明


#查看版本库下的文件和目录列表
svn　list　svn://路径(目录或文件的全路径)
svn　ls　svn://路径(目录或文件的全路径)
例子：
svn list svn://localhost/test
svn ls svn://localhost/test ＜－ 显示svn://localhost/test目录下的所有属于版本库的文件和目录



#创建纳入版本控制下的新目录

svn　mkdir　目录名
svn　mkdir　-m　"新增目录备注文本"　http://目录全路径
例子：
svn mkdir newdir
svn mkdir -m "Making a new dir." svn://localhost/test/newdir 
注：添加完子目录后，一定要回到根目录更新一下，不然在该目录下提交文件会提示“提交失败”

svn update
注：如果手工在checkout出来的目录里创建了一个新文件夹newsubdir，
　　再用svn mkdir newsubdir命令后，SVN会提示：
　　svn: 尝试用 “svn add”或 “svn add --non-recursive”代替？
　　svn: 无法创建目录“hello”: 文件已经存在
　　此时，用如下命令解决：
　　svn add --non-recursive newsubdir
　　在进入这个newsubdir文件夹，用ls -a查看它下面的全部目录与文件，会发现多了：.svn目录
　　再用 svn mkdir -m "添hello功能模块文件" svn://localhost/test/newdir/newsubdir 命令，
　　SVN提示：
　　svn: File already exists: filesystem '/data/svnroot/test/db', transaction '4541-1',
　　path '/newdir/newsubdir '


#恢复本地修改

svn　revert　[--recursive]　文件名
注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录。
例子：
svn revert foo.c ＜－ 丢弃对一个文件的修改
svn revert --recursive . ＜－恢复一整个目录的文件，. 为当前目录 


#把工作拷贝更新到别的URL

svn　switch　http://目录全路径　本地目录全路径
例子：
svn switch http://localhost/test/456 . ＜－ (原为123的分支)当前所在目录分支到localhost/test/456


#解决冲突

svn　resolved　[本地目录全路径]
例子：
$ svn update
C foo.c
Updated to revision 31.
如果你在更新时得到冲突，你的工作拷贝会产生三个新的文件：
$ ls
foo.c
foo.c.mine
foo.c.r30
foo.c.r31
当你解决了foo.c的冲突，并且准备提交，运行svn resolved让你的工作拷贝知道你已经完成了所有事情。
你可以仅仅删除冲突的文件并且提交，但是svn resolved除了删除冲突文件，还修正了一些记录在工作拷贝管理区域的记录数据，所以我们推荐你使用这个命令。



#不checkout而查看输出特定文件或URL的内容

svn　cat　http://文件全路径
例子：
svn cat http://localhost/test/readme.txt
19、新建一个分支copy
svn copy branchA branchB  -m "make B branch" // 从branchA拷贝出一个新分支branchB
20、合并内容到分支merge
svn merge branchA branchB  // 把对branchA的修改合并到分支branchB



#svn解决回退更新版本：

1. 取消Add/Delete

取消文件
svn revert 文件名
取消目录
svn revert --depth=infinity 目录名
2. 回退版本
方法1： 用svn merge
1) 先 svn up，保证更新到最新的版本，如20；
2) 然后用 svn log ，查看历史修改，找出要恢复的版本，如10 。如果想要更详细的了解情况，可以使用svn diff -r 10:20 [文件或目录];
3) 回滚到版本号10：svn merge -r 20:10 [文件或目录]，注意版本号之间的顺序，这个叫反向合并；
4) 查看当前工作版本中的文件，如test.cpp和版本号10中文件的差别：svn diff -r 10 test.cpp， 有差别则手动改之；
5) 若无差别，则提交：svn ci -m“back to r 10，xxxxx” [文件或目录]。这时svn库中会生成新的版本，如21。
方法2: 用svn up
前2步如方法1，然后直接 svn up -r 10。当前的工作版本就是版本10了。但是注意，这时svn库中并不会生成新的版本，下次svn up之后，还是会回到当前的版本。
========================
改动已经被提交（commit）。
用svn merge命令来进行回滚。
回滚的操作过程如下：
1、保证我们拿到的是最新代码：
svn update
假设最新版本号是28。
2、然后找出要回滚的确切版本号：
svn log
假设根据svn log日志查出要回滚的版本号是25，此处的something可以是文件、目录或整个项目
如果想要更详细的了解情况，可以使用svn diff -r 28:25 ""
svn log -v -r 34 查看当前文件夹下某个版本的修改文件列表信息
3、回滚到版本号25：
svn merge -r 28:25 ""
为了保险起见，再次确认回滚的结果：
svn diff ""
发现正确无误，提交。
4、提交回滚：
svn commit -m "Revert revision from r28 to r25,because of ..."
提交后版本变成了29。
将以上操作总结为三条如下：
1. svn update，svn log，找到最新版本（latest revision）
2. 找到自己想要回滚的版本号（rollbak revision）
3. 用svn merge来回滚： svn merge -r : something
更新至某个版本
svn update -r 版本号
svn help update
update (up): 将版本库的修改合并到工作副本中。
用法: update [PATH...]
如果没有指定版本，则将工作副本更新到 HEAD 版本。否则同步到 -r 选项所
指定的版本。
每更新一项就输出一行信息，使用首字符来报告执行的动作。这些字符的含义是:
A 已添加
D 已删除
U 已更新
C 合并冲突
G 合并成功
E 已存在
R 已替换
第一列字符报告项目本身。
第二列表示报告项目属性。
第三列中的字符“B”表示此文件上的锁被终止或窃取。
第四列中的字符“C”表示树冲突，同时“C”出现在第一列或第二列，分别表示
内容冲突或属性冲突。
如果使用了 “--force” 选项，在工作副本中未版本控制的障碍路径，不会自动
导致签出失败。 如果障碍路径与版本库中的对应路径类型相同(文件或目录),它
将成为受版本控制的路径，但是内容不改变。它意味着障碍路径的子孙，也可能
是障碍路径，同样会受版本控制。对于障碍路径中的文件，如果与版本库内的
不同，将视为工作副本发生本地修改。版本库中的所有属性都应用于障碍路径。
用第一列字符 “E” 来报告障碍路径。
如果工作副本中并没有指定的更新目标，但是有其父目录，那么就在指定路径上
将目标检出到其父目录中。如果使用了选项 --parents，就会创建目标的所有不
存在的父目录 (使用选项 --depth=empty)。
使用“--set-depth”选项设置此操作目标的工作副本之新深度。
有效选项:
-r [--revision] ARG : ARG (一些命令也接受ARG1:ARG2范围)
版本参数可以是如下之一:
NUMBER 版本号
'{' DATE '}' 在指定时间以后的版本
'HEAD' 版本库中的最新版本
'BASE' 工作副本的基线版本
'COMMITTED' 最后提交或基线之前
'PREV' COMMITTED的前一版本
-N [--non-recursive] : 过时；尝试 --depth=files 或 --depth=immediates
--depth ARG : 限制操作深度是 ARG ('empty', 'files',
'immediates', 或 'infinity')
--set-depth ARG : 设置工作副本的新深度为 ARG('exclude',
'empty', 'files', 'immediates', 或 'infinity')
-q [--quiet] : 不打印信息，或只打印概要信息
--diff3-cmd ARG : 使用 ARG 作为合并命令
--force : 强制操作运行
--ignore-externals : 忽略外部项目
--changelist [--cl] ARG : 只能对修改列表 ARG 的成员操作
--editor-cmd ARG : 使用 ARG 作为外部编辑器
--accept ARG : 指定自动解决冲突动作
('postpone', 'working', 'base', 'mine-conflict',
'theirs-conflict', 'mine-full', 'theirs-full',
'edit', 'launch')
(shorthand: 'p', 'mc', 'tc', 'mf', 'tf', 'e', 'l')
--parents : 创建中间目录
全局选项:
--username ARG : 指定用户名称 ARG
--password ARG : 指定密码 ARG
--no-auth-cache : 不要缓存用户认证令牌
--non-interactive : 不要交互提示
--trust-server-cert : 不提示的接受未知的证书颁发机构发行的 SSL 服务器证书(只用于选项 “--non-interactive”)
--config-dir ARG : 从目录 ARG 读取用户配置文件
--config-option ARG : 以下属格式设置用户配置选项：
FILE:SECTION:OPTION=[VALUE]
例如：
servers:global:http-library=serf



