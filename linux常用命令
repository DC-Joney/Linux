netstat -lntup | grep 端口

grep 

lsof -i :端口


diff file1 file2 比较文件

#快速替换

sed -i 's/# auth-access = write/auth-access = write/' svnserve.conf
sed -i 's/# anon-access = read/aanon-access = none/' svnserve.conf
sed -i 's%# passwd-db = passwd%passwd-db = /application/svnpasswd/passwd%' svnserve.conf
sed -i 's%# authz-db = authz%authz-db = /application/svnpasswd/authz%' svnserve.conf

#快速查看文件

egrep "\-access|\-db =" svnserve.conf

sudo chmod 700 *

pkill 进程名称

使用pid file的 kill -USR1 `cat /application/svndata/svn.pid`

ifconfig :地址

#解决字符集

export LC_CTYPE=en_US.UTF-8


#查看环境变量:
echo $环境变量名称

#更新环境变量
export 名称 

#刷新
source /etc/profile 在当前终端中更新

pwd 显示当前目录

cd:
	cd ~ 当前用户目录
	cd - 回到刚刚的那一层目录
	cd ~用户名称 返回到指定用户目录下
	
clear 清空当前终端 (Ctrl+L)

 	
ls:
	-a 显示所有文件和子目录 以.开头的是隐藏文件
	-d 只显示目录列表 不显示文件
	-l 显示详细信息包括 权限 大小 和使用者
	-s 在每个文件名称后输出大小
	-k 以KB显示
	-u 以文件上次访问的时间排序
	-t以时间排序
	-S以文件大小排序
	-R列出所有子目录下的文件
	-pF 在每个文件名后附上一个字符以说明改文件的类型，"*"表示可执行的普通文件，"/"表示目录
	，"@"表示符号链接，"|"表示FIFO,"="表示套接字
	
	-Q把输出的文件名用双引号括起来
	ls -laF 

date:
	-s--set 设置系统时间
	-d--date 显示描述的日期
	
who:
	
	
su：
	- 加载相应用户下的环境变量 
	-l 使目前的shell陈伟改变身份后用户默认的shell
	-m 改变身份但是不改变环境变量
	
	
uname:
	-a 显示操作系统全部信息
	-m 显示系统cpu类型
	-n 显示操作系统的主机名称
	-s 显示操作系统类型
	-r 显示操作系统内核版本
	
uptime：
	输出当前系统时间、系统开机到的运行时间 当前多少用户在线和系统平均负载..
	
	
	
磁盘分析：
iostat
	：



#创建文件

touch {a...g}

rz:

dos2unix:
    
    
    
    
输出重定向： > | 1>
追加输出重定向 >> | 1>>

输入重定向  0< | <
追加输入重定向 0<< | <<

2> 收集错误 
cho ori.txt 2>b.txt
2>&1  | &>a.txt
ech old > a.txt > 2>&1 正确的和错误的都放进去 

xargs: 从标准输入获取内容和执行命令
 xargs -n 2 <a.txt 将文件内容输入给这个命令处理  2 为分两组


cp:
    -r 递归拷贝
    -a 相当于-pdr 
    -p 连通档案的属性复制过去 而非默认属性
    -d 复制链接 而非文件

pwd:
    查看当前路径
    -L
    -p 快捷目录
    
mkdir：
    -p 创建目录 如果上一级目录没有则一起创建
    -v 创建的详细信息

{}：
    mkdir {a,b}.txt 花括号展开表达式
    echo {1..3} {4...6} 14 15 ... 24 25 ..35 36

tree:
    tree /etc/ 以树的形式显示
    -a 显示应隐藏文件 
    -d 显示目录文件
    -L 1 显示一层目录 2 显示两层
    -f 显示完整的路径
    -i 不显示前边的横线
    -F 区分文件与文件夹
    
    查看上一个命令:
    echo $PWD 

touch：
        touch{a...b}
        -ad 更改访问 修改时间戳 
ssh 22端口 telnet 23端口 
sshd协议 对应 openssl openssh

上传下载文件:
rz :上传
    sudo apt-get install lrzsz
    -y 覆盖
sz :下载
    -y 覆盖 
查看系统版本: cat /etc/redhat-replace

tail -l /etc/passwd 查看密码

passwd 用户名 设置密码

su - 用户名 切换用户

whoami 查看当前用户

root切换到其他用户不需要密码 普通用户切换到用户或者是 其他用户则需要输入密码

iptables restart 防火墙从新启动 

useradd 添加用户 添加用户  

echo “密码” | passwd --stdin 用户名 （为用户设置密码）


hostname 显示 设置 主机名 （临时修改）

查看网卡配置

/etc/sysconfig/network-scripts/ifconfig-eth0

linux优化:
    运行级别:
    grep  3:initdefault /etc/inittab
    cat /etc/inittab
    5 为多界面模式  3多用户命令行模式
init 3 切换运行级别 

runlevel 查看当前用户的运行级别

#关闭SELinux

cat /etc/linux/config 默认为 enforcing开启 disabled关闭 直接vim修改即可

sed ‘是#SELINUX=enforcing#SELINUX=disabled#g’ 路径(/etc/selinux/config)

sed -i 表示修改

grep 'SELINUX=enforcing' /etc/selinux/config

getenforce 得到SELinux的状态
setenforce 0 表示禁止 1 则为开启 


ls -la /dev/sda*

linux目录的特点：

1，/是所有目录的顶点

2，目录结构像一颗倒挂的树
3，目录和磁盘分区是没有关联的

4./下不同的目录可能对用不同的分区

linux中 设备不挂载是看不到目录的
如果 设备被访问 就必须给一个入口 这个入口就是挂载点挂载点的表现实质就是一个目录

利用 mount 挂载

df -h 

fdisk -l

mount /dev/cdrom /mnt(挂载点)

cd /mnt/Package


/usr/bin 可执行文件  /usr/share/ 数据文件 

ls -ld /bin/ /sbin/ /lib/ /tmp/ 系统下的
ls -ld /user/bin/ /user/sbin/ /user/lib/ /user/tmp/ 用户下的

/usr/local 用户安装的文件 

/dev/ 分区 磁盘 
yum和rpm安装的 默认在 /etc/

/etc/fstab 开机自动挂在的文件
/etc/motd 修改登录的时候的信息 
issuse 启动之前的信息
profile 全局环境变量
resolv.conf dns的配置文件


/var日志目录
/sbin /usr/sbin 超级用户命令的目录

blkid 设备的唯一标识
调整网卡:
    setup

    
setup==network==dhcp 去掉× 添加静态 static ip 添加getaway dns  

route -n 查看网关
cat /etc/resolv.conf 查看dns

networdk resatrt 重启所有网卡 
ip add | grep 192查看网络信息

netstat -an | grep 192 

ifdown eth0 && ifup eth0 针对单网卡 关闭 启动 



dns配置：
    setup->"network configuration"-> DNS configuration ==second dns 修改的就是resolv.conf文件
    
    
logout 登出 

cat /etc/sysconfig/network 修改hostname

chkconfig 设置服务
#查看帮助:  
    man pwd  pwd --help    help pwd info

dmesg 可以看系统故障信息 依赖于 rsyglog 服务是否启动 日志由 /etc/logrotate.conf 和 /etc/logrorare.d/syslog控制


目录详细：
http://yangrong.blog.51cto.com/6945369/1288072


killall mysqld

curl:
    -I 响应头
    -s 安静模式 
    -o 输出对象的
    -w http状态吗k
    
#压缩   
tar -czvf ***.tar.gz
tar -xjvf ***.tar.bz2

#解压缩
tar -xzvf ***.tar.gz

tar -xjvf ***.tar.bz2

简介

参数：

-c  ：建立一个压缩档案的参数指令(create 的意思)；

-x  ：解开一个压缩档案的参数指令！

-t  ：查看 tarfile 里面的档案！

特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！

因为不可能同时压缩与解压缩。

-z  ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？

-j  ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？

-v  ：压缩的过程中显示档案！这个常用，但不建议用在背景执行过程！

-f  ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！

例如使用『 tar -zcvfP tfile sfile 』就是错误的写法，要写成

『 tar -zcvPf tfile sfile 』才对喔！

-p  ：使用原档案的原来属性（属性不会依据使用者而变）

-P  ：可以使用绝对路径来压缩！

-N  ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的档案中！

--exclude FILE：在压缩的过程中，不要将 FILE 打包！
   
   
   
   
   
   
   
   
   
sed：

    sed [options] [sed-commands] [input-file] 可以是文件也可以是标准输入
    sed 选项  sed命令  输入文件
    -d 删除
    -c 替换行
    -s g全局替换文本
    -p输出指定的内容与-n参数连用
    -n取消默认输出 
    -i修改文件
    -w 另存为文件
    -f 后接 sed脚本文件名称
    sed语句
    sed软件

cat | sed
chkconfig ..| sed

seq 10 输出 1-10
#增加
sed "1a 303,30,3" person 1a代表第一行 默认从第1行开始 在每一行之后添加


 sed "2a 303,30,3\
404,40,4" person


cat < 文件 输出

cat > 文件 输入  结束时用ctrl d
#删除
sed '2,4d' person 
sed '2d' person 


n1[,n2]{sed-commands}

10{sed}
10,20{sed} 第10行到第二十行
10,+20{sed}第10行到第30行
1~2{sed} 1为开始 2为间隔 1，3，5，7，9

10，${sed} $代表最后一行

正则匹配：
    /zhangyao/{sed}
    /zhangyao/,/Alex/{sed}
    /zhangyao/,${sed}
    /zhangyao/,+20/{sed}
    
支持组合

10,/Alex/${sed}
/Alex/,10{sed}
/zhangyao/,+20{sed}

seq 10 | sed -n '2~2p'

sed -n '/Alex/,/zhangyao/p' person  --会重复匹配 /p表示结束


打印文件内容但不包含Alex
sed '/Alex/d' person


修改:
#单行替换
sed '2c 100,10,1' person 
    
#多行替换：
    sed '2c 100,10,1\n101' person
     sed '2,3c 100,10,1\n101' person
#文本替换
    g表示全局替换
    
sed -i 's###g' person 替换文本

sed -i 's#Alex#aaa#g' person 不加 -i则表示只是更改的内存

案例3:对指定行修改配置文件

sed -i '5s#linux=enforcing#linux=disabled#g' selinux.conf 表示修改替换第五行

变量替换:
x=a
x=a    
echo $x,$y
sed "s#$x#$y#g" zimu 这里不能用 单引号是因为 单引号会把 变量当做 普通字符串 而双引号则会解析

如果非要用单引号 sed 's#${x}#${y}#g' zimu,  expr sed 's#$x#$y#g' expr会先将内置变量解析出来 然后在执行命令

分组替换: \(\) \1
echo I am a teacher! | sed 's#^.*am \([a-z].*\) tea.*$#\1#g'

案例4： 系统开机项优化
    chkconfig --list | greo 3:on
    chkconfig --list|grep 3:on | grep -vE "sshd|crond|network|rsyglog|sysstat" | awk '{print $1} '|sed -r 's#(.*)#chkconfig \1 off#g' |bash
    
特殊符号： & 代表被替换的内容

sed -r '1,3s#(.*)#--&--#g' person -r表示开启对这样的符号的支持

sed -r 's#(.*),(.*),(.*)#--&-\1==\2==\3#g' test/person 

--000,aaa,0-000==aaa==0
--101,10,1-101==10==1
--202,20,2-202==20==2
--303,30,3-303==30==3
--404,40,4-404==40==4
--505,50,5-505==50==5
--606,zhangyao,6-606==zhangyao==6
案例:文件批量重命名


mkdir -p $file && cd $file && for i in {1..5};do touch sty_10299_${i}.jpg;done
ls  *.jpg | sed -r 's#(.*).jpg#mv & \1_finsh.jpg#g'|bash


查询：
    -n取消默认输出
    
    dcjoney@kanglu:~/test$ sed '2p' person 
    000,aaa,0
    101,10,1
    101,10,1
    202,20,2
    303,30,3
    404,40,4
    505,50,5
    606,zhangyao,6
    
    
    dcjoney@kanglu:~/test$ sed -n '2p' person 
    101,10,1
    
    查询出来全部:
    sed '' person
    
    
指定行数查询:sed -n '/zhangyao/,7p' person


修改文件:

    sed -i.ori 's#zhangyao#NS#g' person 先做一个备份 然后 在操作替换
    
另存文件:   
    sed '5s#zhangyao#NB#g w output.txt ' person  5代表行数
    
替换标志:
    g全局替换 数字标识1,2,3 打印p  写 w 忽略大小写 i 执行命令标志 e
    for i in {1..5};do echo $i $i $i $i $i >>num;done
    sed '2s#2#0#3' num 第二行的第二列变为0
    sed '2s#2#0#3g' num 从第二行的第二列开始变为0 无g则匹配的第一次处理
    
   sed -n 's#NS#zhangyao#p' person 只打印替换掉的那一行 
   sed -n 's#NS#zhangyao#p;w output.txt' person 中间加分号 是将修改过的文件写入output.txt中
   
   
   sed -i '1s#ns#Alex#gi' person 忽略需要替换的字符串的大小写
    
   sed 's#^#ls -lh #ge' file 将内容作为bash指令执行 中间命令之后要加空格
   chkconfig --list|grep 3:on | grep -vE "sshd|crond|network|rsyglog|sysstat" | awk '{print $1} '|sed -r 's#(.*)#chkconfig \1 off#e'
   
其他替换标志:
    \l 在替换字符串中使用\l标志时，他会把紧跟在其后面的字符当做小写字符处理
    \L 在替换字符串中使用\L标志时，他会把后面所有的字符当做小写字符处理
    \u 在替换字符串中使用\u标志时，他会把紧跟在其后面的字符当做大写字符处理
    \U 在替换字符串中使用\U标志时，他会把后面所有的字符当做大写字符处理
    \E需要配合\U\L一起使用，他将关闭\U\L的功能

    sed -r 's#(.*),(.*),(.*)#\L\3,\E\1,\U\2#g' person
    
    sed -n 's#zhangyao#ZH\lANGYAO#p' person
   
   
   
获取行号:
    sed '=' person
    1
    000,Alex,0
    2
    000,Alex,0
    3
    000,NS,0
    4
    101,10,1
    5
    202,20,2
    6
    303,30,3
    7
    404,40,4
    8
    505,50,5
    9
    606,NS,6
    
    
    sed '1,3=' person
    1
    000,Alex,0
    2
    000,Alex,0
    3
    000,NS,0
    101,10,1
    202,20,2
    303,30,3
    404,40,4
    505,50,5
    606,NS,6
    
    
    sed '/zhangyao/=' person
    000,Alex,0
    000,Alex,0
    000,NS,0
    101,10,1
    202,20,2
    303,30,3
    404,40,4
    505,50,5
    606,NS,6
    
    
    sed '=' person | sed 'N;s#\n# #'
    1 000,Alex,0
    2 000,Alex,0
    3 000,NS,0
    4 101,10,1
    5 202,20,2
    6 303,30,3
    7 404,40,4
    8 505,50,5
    9 606,NS,6
一条sed语句执行多条 sed命令

    1.sed '3,$d' person |sed  's#alex#zhangyang#gi'
    2.sed -e '3,$d' -e 's#alex#zhangyang#gi' person
    3.sed '3,$d;s#alex#zhangyang#gi' person
    
    
    vim person.sed
    3,$d
    s#alex#zhangyang#gi
    4. sed -f person.sed person
    
案例6：一个文件100行，把5，35，70单独拿出来
    touch file100 && for i in {1..100};do echo $i >> file100;done 
    
    sed -n '5p;35p;75p' file100
    
7.特殊符号{}

sed -n '2,4p;=' person 显示的是所有的行号

sed -n '2,4{p;=}' person 只显示2到4的行号  先执行 2,4打印 然后 打印行号


sed -n '2,4p;2,4=' person 只显示2到4的行号  先执行 2,4打印 然后 打印2,4行号

打印不可见字符:

    sed -n 'l' person
    001,Alex,0$
    002,Alex,0$
    003,NS,0$
    101,10,1$
    202,20,2$
    303,30,3$
    404,40,4$
    505,50,5$
    606,NS,6$
    
转换字符:
    sed 'y#abc#ABC#' person
    
    sed 'q' person
    sed '3q' person 碰到 第几行之后将不在往下执行

sed '1r output.txt' person 从一个文件读取数据 添加到 person文件中



操作多个文件:
    

模拟其他命令:
    
    模拟grep命令 grep -v:
    
    sed -n '/zhang/ !p' person 过滤掉所有包含zhany的行
    过滤文件
    
    sed -n '/Alex/p' person 包含Alex的行
    
    模拟head命令
    
    sed -n '1,2p' person
    sed -n '3,$d' person
    sed -n '2q' person
    
    模拟wc命令:
    sed -n '$=' person
    
    
    
装逼知识点，保持空间和模式空间:
    n 清空当前模式空间然后读入下一行
    N
    
    sed -n 'n;p' person
    
    1
    dcjoney
    2
    marin
    
    sed  'N;$#\n#=#' person
    
    
【转】sed命令n，N，d，D，p，P，h，H，g，G，x解析(http://www.cnblogs.com/nhlinkin/p/3565922.html)

1、

sed执行模板=sed '模式{命令1;命令2}'

即逐行读入模式空间，执行命令，最后输出打印出来

2、

为方便下面，先说下p和P，p打印当前模式空间内容，追加到默认输出之后，P打印当前模式空间开端至\n的内容，并追加到默认输出之前。

sed并不对每行末尾\n进行处理，但是对N命令追加的行间\n进行处理，因为此时sed将两行看做一行。

2-1、n命令

n命令简单来说就是提前读取下一行，覆盖模型空间前一行（并没有删除，因此依然打印至标准输出），如果命令未执行成功（并非跳过：前端条件不匹配），则放弃之后的任何命令，并对新读取的内容，重头执行sed。

例子：

从aaa文件中取出偶数行


cat aaa 
This is 1    
This is 2    
This is 3    
This is 4    
This is 5    
     
sed -n 'n;p' aaa         //-n表示隐藏默认输出内容    
This is 2    
This is 4

注 释：读取This is 1，执行n命令，此时模式空间为This is 2，执行p，打印模式空间内容This is 2，之后读取 This is 3，执行n命令，此时模式空间为This is 4，执行p，打印模式空间内容This is 4，之后读取This is 5，执行n 命令，因为没有了，所以退出，并放弃p命令。

因此，最终打印出来的就是偶数行。

 

2-2、N命令

N命令简单来说就是追加下一行到模式空间，同时将两行看做一行，但是两行之间依然含有\n换行符，如果命令未执行成功（并非跳过：前端条件不匹配），则放弃之后任何命令，并对新读取的内容，重头执行sed。

例子：

从aaa文件中读取奇数行


cat aaa   
This is 1   
This is 2   
This is 3   
This is 4   
This is 5   
                                                     
sed -n '$!N;P' aaa            
This is 1   
This is 3   
This is 5
注释中1代表This is 1   2代表This is 2  以此类推

注释：读取1，$!条件满足（不是尾行），执行N命令，得出1\n2，执行P，打印得1，读取3，$!条件满足（不是尾行），执行N命令，得出3\n4，执行P，打印得3，读取5，$!条件不满足，跳过N，执行P，打印得5

 

2-3、d命令

d命令是删除当前模式空间内容（不在传至标准输出），并放弃之后的命令，并对新读取的内容，重头执行sed。

d命令例子

从aaa文件中取出奇数行

cat aaa   
This is 1   
This is 2   
This is 3   
This is 4   
This is 5   
                                                           
sed 'n;d' aaa           
This is 1   
This is 3   
This is 5
注释：读取1，执行n，得出2，执行d，删除2，得空，以此类推，读取3，执行n，得出4，执行d，删除4，得空，但是读取5时，因为n无法执行，所以d不执行。因无-n参数，故输出1\n3\n5

2-4、D命令

D命令是删除当前模式空间开端至\n的内容（不在传至标准输出），放弃之后的命令，但是对剩余模式空间重新执行sed。

D命令例子

从aaa文件中读取最后一行


cat aaa   
This is 1   
This is 2   
This is 3   
This is 4   
This is 5   
                                                
sed 'N;D' aaa           
This is 5
注释：读取1，执行N，得出1\n2，执行D，得出2，执行N，得出2\n3，执行D，得出3，依此类推，得出5，执行N，条件失败退出，因无-n参数，故输出5

 

2-5、y命令

y命令的作用在于字符转换

y命令例子：

将aaa文件内容大写


sed 'y/his/HIS/' aaa  
THIS IS 1  
THIS IS 2  
THIS IS 3  
THIS IS 4  
THIS IS 5
此外，如果需要对某个字符串进行大小写转换，则可使用如下方法

cat ddd   
This is a and a is 1   
This is b and b is 2   
This is c and c is 3   
This is d and d is 4   
This is e and e is 5   
    
sed 's/\b[a-z]\b/\u&/g' ddd   
This is A and A is 1   
This is B and B is 2   
This is C and C is 3   
This is D and D is 4   
This is E and E is 5
2-6、h命令，H命令，g命令，G命令

h命令是将当前模式空间中内容覆盖至保持空间，H命令是将当前模式空间中的内容追加至保持空间

g命令是将当前保持空间中内容覆盖至模式空间，G命令是将当前保持空间中的内容追加至模式空间

命令例子：

将ddd文件中数字和字母互换，并将字母大写


cat ddd.sed
h  
{  
s/.*is \(.*\) and .*/\1/  
y/abcde/ABCDE/
G  
s/\(.*\)\n\(.*is \).*\(and \).*\(is \)\(.*\)/\2\5 \3\5 \4\1/  
}  
                                           
sed -f ddd.sed ddd  
This is 1 and 1 is A  
This is 2 and 2 is B  
This is 3 and 3 is C  
This is 4 and 4 is D  
This is 5 and 5 is E
注释：读取1，执行h，复制到保持空间，执行s，模式空间得到匹配到的字母a，然后执行y，将a转成A，执行G，追加保持空间内容到模式空间，得

A\nThis is a and a is 1；执行s，重新排列，得出This is 1 and 1 is A；以此类推，得出结果。

这里需要注意的是匹配的内容中，空格一定要处理好，空格处理不对，会造成第二次s匹配错误，无法执行重新排列或排列错误

2-7、x命令

x命令是将当前保持空间和模式空间内容互换



sort 排序：
    sort number
    10.0.0.7
    10.0.0.7
    10.0.0.8
    10.0.0.8
    10.0.0.8
    10.0.0.9
    10.0.0.9
    -u 排序然后去重 -u --unique
    
    -r --reverse倒叙排列
    
    -n 按照数字排序 默认是升序
        :sort -nr number
    
    cut -d / -f3 number | sort -r | uniq -c | head -10
    
    -t 表示按点号分割域
    
    类似域awk的-F，取字段用$1 $2 或cut的-d 取数字段段 f数字 

    
    sort -t " " -k2 number1 排序字母 
    
    sort -t " " -rk2 number1 排序字母 倒叙
    10.0.0.8 z
    10.0.0.9 o
    10.0.0.7 n
    10.0.0.8 k
    10.0.0.7 f
    10.0.0.8 c
    10.0.0.9 a
默认按整行排序
-t 指定分隔符 -k1 分隔符之后的第一列排序

-k 1,1 用逗号来分割字段

-k 1.1,3.3 用 
    
    sort -t. -k3.1,3.1nr -k4.1,4.3nr fileNAme
    
案例:
    
uniq：去重
    uniq number
    10.0.0.9
    10.0.0.8
    10.0.0.7
    10.0.0.8
    10.0.0.9
    
    
    不加参数只对相邻的相同的参数去重
    
    sort number | uniq 利用排序去重
    
    -d:显示重复出现的行 2次和2次以上的行
    
    -u 仅显示 出现一次的行
    -c 计数
    
去重统计:
    sort number| uniq -c 

案例:
    awk -F / '{print $3}' oldboy.log|sort|uniq -c | sort -r

    cut -d / -f3 number | sort -r | uniq -c
    
    
awk数组:
    awk 'BEGIN{array[1]="zy";array[2]="kl";for (key in array) print key ,array[key]}'
    
    
    #!/usr/bin/awk
    BEGIN{
            array[1]="old";
            array[2]="boy";
            for(key in array)
            print key,array[key];
    }

    
    
    awk -f t1.awk 
    当 后边不接文件时要加BEGIN
    
    awk 'BEGIN{array[1]="zy";array[2]="kl";for (key in array);} END{rint key ,array[key]}'
    一般有END时 需要接个文件
    
    cat /etc/profile | awk 'BEGIN{array[1]="zy";array[2]="kl"} END{for (key in array) print key,array[key];}' > t3.log

    
    awk -F " "'{S[$1]=$2} END {for (key in S) print key,S[key]}' t3.log
    
    这两个是一样的:
        awk -F " " '{S[$1]=$2} END {for (key in S) print key,S[key]}' t3.log
        
    oldboy.log
    http://www.etiantuan.org/index.html
    http://www.etiantuan.org/1.html
    http://post.etiantuan.org/index.html
    http://mp3.etiantuan.org/index.html
    http://www.etiantuan.org/3.html
    http://post.etiantuan.org/2.html
    
    awk -F "/" '{S[$3]=S[$3]+1}END{for(k in S) print k,S[k]}' oldboy.log 

     awk -F "/" '{S[$3]=S[$3]+1}END{for(k in S) print k,S[k]}' oldboy.log |sort -rn -k2 排序
     
      awk ''  

      
less:
    
    
    